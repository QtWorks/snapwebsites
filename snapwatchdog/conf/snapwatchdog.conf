# Sample of Snap! Watchdog configuration file
#
# The file is a basic list of variable name = value
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored


# debug=on
#
# Whether you want to turn on debug mode (variable is set) of the server.
# The default is off (variable undefined). This is exactly the same as
# using the --debug command line option. This is useful as the command
# line option is harder to use when working with systemd.
#
# Default: <undefined>
#debug=on


# log_config=<path to log properties>
#
# This variable defines the properties that log4cplus library will read
# to handle logging of the snapwatchdog daemon.
#
# Default: /etc/snapwebsites/logger/snapwatchdog.properties
log_config=/etc/snapwebsites/logger/snapwatchdog.properties


# statistics_period=<number of readings to cycle through>
#
# The period defines the duration for which the statistics are kept around.
# After that amount, new statistics overwrite old statistics.
#
# The minimum is 1 hour (3600)
#
# IMPORTANT: This value is currently rounded up to 1 hour, so you should use
#            a multiple of 3600 to make it easier to graps
#
# 1 week is 604800 seconds
#
# Default: 604800
statistics_period=604800


# statistics_frequency=<interval between statistics gathering>
#
# The statistics frequency defines how often we read new data in seconds
#
# The minimum frequency is 1 minute (60 seconds)
#
# Default: 60
statistics_frequency=60


# statistics_ttl=<how long to keep statistics in Cassandra>
#
# The statistics saved in the Cassandra cluster are given a TLL in seconds
# representing the amount of time it will be kept in the database.
#
# Because of the way we save the data in the Cassandra cluster and the
# way the cluster is implemented, having a TTL will help greatly in not
# keeping all the data possibly forever.
#
# In most cases you want to use the same number as defined in the
# statistic_period parameter or a little more; use zero to avoid
# the Cassandra auto-deletion of old data.
#
# 1 week is 604800
#
# Default: 604800
statistics_ttl=604800


# plugins_path=<path to the snapwatchdog plugins>
#
# This variable holds the folder with the watchdog plugins.
#
# If you are a developer, you may want to change this path to your
# developer BUILD directory.
#
# Default: /usr/lib/snapwebsites/watchdog_plugins
plugins_path=/usr/lib/snapwebsites/watchdog_plugins


# plugins=<name, name, ...>
#
# The list of watchdog plugins to load to watch this server.
#
# WARNING: Contrary to the snapserver, this "plugins" variable MUST be
#          defined
#
# Default: cpu,disk.memory,network,processes
plugins=cpu,disk,memory,network,processes,watchscripts


# log_path=<path to save log files>
#
# This is the path to the log directory used by this daemon.
#
# Note that it is also defined in the .properties file. You should
# keep both in sync.
#
# The output from running the snapwatchdog scripts is saved under a
# sub-folder named "scripts-output" in this folder. We use a sub-folder
# because the number of files can become quite large as so many files
# are going to be used and we run logrotate once per run to make sure
# that files get rotated as expected by this feature.
#
# If you change this path or the `log_subfolder` variable, then
# you must make sure that the new directory gets rotated.
#
# Default: /var/log/snapwebsites
log_path=/var/log/snapwebsites


# log_subfolder=<path to the snapwatchdog sub-folder>
#
# When snapwatchdog runs external scripts, it saves the output in
# log files. The output should be non-existant when no errors are
# detected. Those log files are saved under the path defined in
# `log_path` and `log_subfolder`.
#
#    log_path + "/" + log_subfolder + "/" + "snapwatchdog-scripts.log"
#
# If you change this sub-folder name or the `log_path` variable, then
# you must make sure that the new directory gets rotated.
#
# Default: snapwatchdog-output
log_subfolder=snapwatchdog-output


# data_path=<path to data directory>
#
# Path to where the watchdog can save data that it gathers while running.
# (counters, statistics, etc.)
#
# By default, we set this variable to this path:
#
#     /var/lib/snapwebsites/snapwatchdog/data
#
# However, the default is the empty string which means: do not save the
# output anywhere (in case you wanted to save a few Mb of space on your
# hard drive.)
#
# Default:
data_path=/var/lib/snapwebsites/snapwatchdog/data


# watchdog_processes=<process names>
#
# This variable holds a list of processes to watch on this server. This
# list should vary depending on the bundles installed. (i.e. we should
# have an external set of .conf files that other services can install
# to declare a set of processes that they want to have tracked by
# the snapwatchdog system.)
#
# IMPORTANT NOTE: This will be deprecated. Instead, our watchdog scripts
#                 will take over the problem of knowing whether a certain
#                 process is running or not.
#
# Default: apache2,snapserver,snapcommunicator,snapfirewall,snaplock,snapdbproxy,snapmanagerdaemon,snapbackend,cassandra:java.*apache-cassandra-[.0-9]+\.jar
watchdog_processes=apache2,snapserver,snapcommunicator,snapfirewall,snaplock,snapdbproxy,snapmanagerdaemon,snapbackend,cassandra:java.*apache-cassandra-[.0-9]+\.jar


# from_email=<email address>
#
# Define the "From: ..." email when snapwatchdog is to send emails, which
# it does whenever it detects a problem (i.e. CPU clamped at 100%, heavy
# swapping, processes not running, processes running "forever", etc.)
#
# Until this email and administrator_email are both defined, no email will
# be sent by snapwatchdogserver.
#
# Default: <none> (but required for the email mechanism to work)
from_email=


# administrator_email=<email address>
#
# The administrator email is the one address where problems discovered by
# the snapwatchdogserver are sent. If you want multiple people to receive
# those emails, then create a list in postfix. For example, you could
# define an email such as `snapwatchdog@example.com` and then forward
# emails sent to that address to all your administrators.
#
# Until this email and from_email are both defined, no email will be
# sent by snapwatchdogserver.
#
# Default: <none> (but required for the email mechanism to work)
administrator_email=


# watchdog_watchscripts_path=<path to list of scripts>
#
# This variable holds the path to the list of scripts. This is a directory
# where the snapwatchdog and other projects put scripts that are used to
# verify that the system is sane. Each project can add any number of
# scripts.
#
# You project should name its scripts with a "namespace" so you
# do not take the risk of overwriting another project's script. For
# example, the firewall script to verify that fail2ban-client is not
# running and using 100% of the CPU for ever is called:
#
#    watch_firewall_fail2ban_client
#
# The "watch_" at the start is used to mark the script as a snapwatchdog
# script.
#
# The "firewall_" is the namespace.
#
# The "fail2ban_client" is what that script is for.
#
# Default: /usr/share/snapwebsites/snapwatchdog/scripts
#watchdog_watchscripts_path=/usr/share/snapwebsites/snapwatchdog/scripts


# watchdog_watchscripts_files=<path to various scripts files>
#
# The watchdog scripts may need to memorize various information
# while running their tests. i.e. some tests may need to run
# over a long period of time and the state of that script will
# be found in this folder.
#
# You script filename should include your project name and a
# script name so each file remains unique.
#
# Note that regular script output and errors are saved in log files
# instead and those log files go under the path defined by:
#
#    log_path + "/" + log_subfolder
#
# This variable holds the path to a folder where the file named
# watchdog_scripts.log is created.
#
# Default: /var/lib/snapwebsites/snapwatchdog/script-files
#watchdog_watchscripts_output=/var/lib/snapwebsites/snapwatchdog/script-files


# vim: wrap
